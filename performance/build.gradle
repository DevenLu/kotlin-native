import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

buildscript {
    ext.rootBuildDirectory = file('..')

    apply from: "$rootBuildDirectory/gradle/loadRootProperties.gradle"
    apply from: "$rootBuildDirectory/gradle/kotlinGradlePlugin.gradle"
    repositories {
        maven {
            url 'https://cache-redirector.jetbrains.com/maven-central'
        }
        maven {
            url kotlinCompilerRepo
        }
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
    }
}

apply plugin: 'kotlin-multiplatform'

repositories {
    maven {
        url 'https://cache-redirector.jetbrains.com/maven-central'
    }
    maven {
        url kotlinCompilerRepo
    }
    maven {
        url buildKotlinCompilerRepo
    }
    jcenter()
}

ext."konan.home" = distDir

private def determinePreset() {
    def preset = MPPTools.defaultHostPreset(project)
    println("$project has been configured for ${preset.name} platform.")
    preset
}

def hostPreset = determinePreset()

kotlin {
    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion"
            }
        }
        nativeMain {
            dependsOn commonMain
            kotlin.srcDir 'src/main/kotlin'
            kotlin.srcDir 'src/main/kotlin-native'
        }
        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
            }
            dependsOn commonMain
            kotlin.srcDir 'src/main/kotlin'
            kotlin.srcDir 'src/main/kotlin-jvm'
        }
    }

    targets {
        fromPreset(presets.jvm, 'jvm') {
            def mainOutput = compilations.main.output
            compilations.all {
                tasks[compileKotlinTaskName].kotlinOptions {
                    jvmTarget = '1.8'
                }
                tasks[compileKotlinTaskName].kotlinOptions.suppressWarnings = true
            }
        }

        fromPreset(hostPreset, 'native') {
            compilations.main.outputKinds('EXECUTABLE')
            compilations.main.extraOpts '-opt'
            compilations.main.buildTypes = [RELEASE]
        }
    }
}

MPPTools.createRunTask(project, 'konanRun', kotlin.targets.native) {
    workingDir = project.provider {
        kotlin.targets.native.compilations.main.getBinary('EXECUTABLE', buildType).parentFile
    }
    args("$nativeWarmup", "$attempts", "${buildDir.absolutePath}/${nativeBenchResults}")
    outputFileName("${buildDir.absolutePath}/${nativeTextReport}")
}

task jvmRun(type: JavaExec)  {
    dependsOn 'build'
    def output = new ByteArrayOutputStream()
    def runtimeClasspath = files(
            kotlin.targets.jvm.compilations.main.output.allOutputs,
            project.configurations.getByName(kotlin.targets.jvm.compilations.main.runtimeDependencyConfigurationName)
    )
    classpath runtimeClasspath
    main = "MainKt"
    args "$jvmWarmup", "$attempts",  "${buildDir.absolutePath}/${jvmBenchResults}"
    standardOutput = output
    doLast {
        dumpReport("${buildDir.absolutePath}/${jvmTextReport}", output)
    }
}

task konanJsonReport << {
    def backendDesc = ['type'   : 'native',
                       'version': "${konanVersion}",
                       'flags': kotlin.targets.native.compilations.main.extraOpts]
    String benchContents = new File("${buildDir.absolutePath}/${nativeBenchResults}").text
    def jsonSlurper = new JsonSlurper()
    def benchs = jsonSlurper.parseText(benchContents)
    def output = new JsonReport(new KotlinCompiler("${kotlinVersion}", backendDesc), benchs).toJson()
    new File("${buildDir.absolutePath}/${nativeJson}").write(output)
}

task jvmJsonReport << {
    def backendDesc = ["type": "jvm",
                       "version": "${buildKotlinVersion}"]
    String benchContents = new File("${buildDir.absolutePath}/${jvmBenchResults}").text
    def jsonSlurper = new JsonSlurper()
    def benchs = jsonSlurper.parseText(benchContents)
    def output = new JsonReport(new KotlinCompiler("${kotlinVersion}", backendDesc), benchs).toJson()
    new File("${buildDir.absolutePath}/${jvmJson}").write(output)
}

jvmRun.finalizedBy jvmJsonReport
konanRun.finalizedBy konanJsonReport

private void dumpReport(String name, ByteArrayOutputStream output) {
    new File("${name}").withOutputStream {
        it.write(output.toByteArray())
    }
}

task bench(type:DefaultTask) {
    dependsOn jvmRun
    dependsOn konanRun

    doLast {
        def jvmReport = new Report(project.file("${buildDir.absolutePath}/${jvmTextReport}"))
        def konanReport = new Report(project.file("${buildDir.absolutePath}/${nativeTextReport}"))
        def average = "none"
        def absoluteAverage = "none"
        jvmReport.report
                .sort { konanReport.report[it.key].mean / it.value.mean }
                .each { k, v ->
            def konanValue = konanReport.report[k]
            def ratio = konanValue.mean / v.mean
            // This is a hack since neither mean nor variance of ratio of two distributions is known.
            def minRatio = (konanValue.mean - konanValue.stdDev) / (v.mean + v.stdDev)
            def maxRatio = (konanValue.mean + konanValue.stdDev) / (v.mean - v.stdDev)
            def ratioConfInt = Math.min(Math.abs(minRatio - ratio), Math.abs(maxRatio - ratio))
            def formattedKonanValue = String.format('%.4f us +- %.4f us', konanValue.mean / 1000, konanValue.stdDev / 1000)
            def formattedRatio = String.format('%.2f +- %.2f', ratio, ratioConfInt)
            if (k == 'RingAverage') {
                average = formattedRatio
                absoluteAverage = formattedKonanValue
            } else {
                println("$k : absolute = $formattedKonanValue, ratio = $formattedRatio")
            }
            if (System.getenv("TEAMCITY_BUILD_PROPERTIES_FILE") != null)
                println("##teamcity[buildStatisticValue key='$k' value='$ratio']")
        }

        println()
        println("Average Ring score: absolute = $absoluteAverage, ratio = $average")
    }
}

class Results {
    def Double mean
    def Double stdDev

    Results(Double mean, Double stdDev) {
        this.mean = mean
        this.stdDev = stdDev
    }
}

class JsonSerializable {
    // Standard groovy classes have extra fields contentHash and originalClassName
    protected def instance = new Object()
    
    String toJson() {
        return new JsonBuilder(instance).toPrettyString()
    }
    
    Object getInstance() {
        return instance
    }
}

class Machine extends JsonSerializable {
    Machine() {
        instance.metaClass.os =  System.getProperty("os.name") // OperatingSystem.current().getName()
        instance.metaClass.cpu = System.getProperty("os.arch")
    }
}

class JDKInstance extends JsonSerializable {
    JDKInstance() {
        instance.metaClass.version = System.getProperty("java.version") // org.gradle.internal.jvm.Jvm.current().javaVersion
        instance.metaClass.vendor = System.getProperty("java.vendor")
    }
}

class KotlinCompiler extends JsonSerializable {
    KotlinCompiler(String kotlinVersion, def backend) {
        instance.metaClass.kotlinVersion = kotlinVersion
        instance.metaClass.backend = backend
    }
}

class JsonReport extends JsonSerializable {
    JsonReport(def kotlinCompiler, def benchmarks) {
        instance.metaClass.env = ["machine": new Machine().getInstance(),
                                  "jdk": new JDKInstance().getInstance()]
        instance.metaClass.kotlin = kotlinCompiler.getInstance()
        instance.metaClass.benchmarks = benchmarks
    }
}

class Report {
    Map<String, Results> report = new TreeMap()

    Report(File path) {
        path.readLines().drop(3).findAll { it.split(':').length == 3 }.each {
            def p = it.split(':')
            report.put(p[0].trim(), new Results(Double.parseDouble(p[1].trim()), Double.parseDouble(p[2].trim())))
        }
    }
}
